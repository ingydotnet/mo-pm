package Mo::isa;$M="Mo::";
$VERSION=0.30;
$Z=CODE;sub O(_){UNIVERSAL::can(@_,isa)}sub S(&){pop}sub Z{1}sub R(){ref}sub N(){!defined}sub Y(){!N&&!R}our%TC=(Any,\&Z,Item,\&Z,Bool,S{N||0 eq$_||1 eq$_||''eq$_},Undef,\&N,Defined,S{!N},Value,\&Y,Str,\&Y,Num,S{Y&&/^([+-]?\d+|[+-]?(?=\d|\.\d)\d*(\.\d*)?(e([+-]?\d+))?|(Inf(inity)?|NaN))$/i},Int,S{/^\d+$/},Ref,\&R,FileHandle,\&R,Object,S{R&&O},(map{$_.Name,S{Y&&/^\S+$/}}qw/Class Role/),map{my$J=/R/?$_:uc$_;$_.Ref,S{R eq$J}}qw(Scalar Array Hash Code Glob Regexp));sub check{my$v=pop;return eval{$_[0]->($v);1}if ref$_[0]eq$Z;@_=split/\|/,shift;while(@_){(my$t=shift)=~s/^\s+|\s+$//g;if($t=~/^Maybe\[(.+)\]$/){@_=(Undef,$1,@_);next}$t=$1 if$t=~/^(.+)\[/;if(my$k=$TC{$t}){local$_=$v;&$k&&return 1}elsif($t=~/::/){O($v)&&$v->isa($t)&&return 1}else{return 1}}0}sub av{(my$t,$_)=@_;ref($t)eq$Z?$t->($_):${die"not $t\n"if!check@_}}*{$M.isa::e}=S{my($P,$e,$o)=@_;my$C=*{$P.new}{$Z}||*{$M.Object::new}{$Z};*{$P.new}=S{my%a=@_[1..$#_];av(($cx{$P.$_}||next),$a{$_})for keys%a;goto$C};$o->{isa}=S{my($m,$n,%a)=@_;my$V=$cx{$P.$n}=$a{isa}or return$m;S{av$V,$_[1]if$#_;$m->(@_)}}}
